import { useEffect, useState } from "react";
import axios from "axios";
import "./Tarefas.css";

/*Componente de Tarefas
  Permite que usu√°rios gerenciem suas tarefas, incluindo
  adi√ß√£o, edi√ß√£o, exclus√£o e conclus√£o de tarefas.
  Exibe uma lista de tarefas com op√ß√µes de filtro para ver pendentes ou conclu√≠das.
  Exibe um formul√°rio para adicionar ou editar tarefas.
  Inclui valida√ß√£o de datas e exibe mensagens de erro quando necess√°rio.
  Exibe o nome do usu√°rio logado e permite logout.
  Requer autentica√ß√£o via token JWT armazenado no localStorage.
 */
export default function Tarefas() {
  const [tarefas, setTarefas] = useState([]);
  const [nome, setNome] = useState("");
  const [status, setStatus] = useState("Pendente");
  const [inicio, setInicio] = useState("");
  const [fim, setFim] = useState("");
  const [prioridade, setPrioridade] = useState("MEDIA");
  const [editarId, setEditarId] = useState(null);
  const [mostrarFinalizadas, setMostrarFinalizadas] = useState(false);
  const [erroData, setErroData] = useState("");
  const [nomeUsuario, setNomeUsuario] = useState("");

  const usuarioId = localStorage.getItem("usuarioId");
  const token = localStorage.getItem("token");

  /*Verifica se o usu√°rio est√° autenticado
   Se n√£o estiver, exibe uma mensagem de erro e n√£o permite o acesso √†s tarefas
   Se o token ou ID do usu√°rio n√£o estiverem presentes, redireciona para a p√°gina de login
   Isso garante que apenas usu√°rios autenticados possam acessar e gerenciar suas tarefas
   Se o token ou ID do usu√°rio n√£o estiverem presentes, exibe uma mensagem de erro e n√£o permite o acesso √†s tarefas
  */
 
  if (!usuarioId || !token) {
    console.error("Usu√°rio n√£o autenticado. Redirecionando...");
    return;
  }

  // Configura os headers para autentica√ß√£o com o token JWT
  // O token √© enviado no cabe√ßalho Authorization para cada requisi√ß√£o √† API
  const headers = {
    Authorization: `Bearer ${token}`,
    "Content-Type": "application/json",
  };

  // Fun√ß√µes para buscar tarefas e nome do usu√°rio
  // Utilizam axios para fazer requisi√ß√µes √† API do backend
  const buscarTarefas = async () => {
    try {
      const res = await axios.get(`http://localhost:8080/tarefas/usuario/${usuarioId}`, { headers });
      setTarefas(res.data);
    } catch (err) {
      console.error("Erro ao buscar tarefas:", err);
    }
  };

  // Busca o nome completo do usu√°rio logado
  // Utiliza o ID do usu√°rio armazenado no localStorage para fazer a requisi√ß√£o
  const buscarNomeUsuario = async () => {
    try {
      const res = await axios.get(`http://localhost:8080/usuarios/${usuarioId}`, { headers });
      setNomeUsuario(res.data.nomeCompleto);
    } catch (err) {
      console.error("Erro ao buscar usu√°rio:", err);
    }
  };

  // Limpa os campos do formul√°rio
  // Reseta os estados para permitir a adi√ß√£o de uma nova tarefa
  const limparCampos = () => {
    setNome("");
    setStatus("Pendente");
    setInicio("");
    setFim("");
    setPrioridade("MEDIA");
    setEditarId(null);
    setErroData("");
  };
  // Fun√ß√£o para adicionar ou atualizar uma tarefa
  // Verifica se o nome da tarefa n√£o est√° vazio e se as datas s√£o v√°lidas
  const adicionarOuAtualizarTarefa = async () => {
    if (!nome.trim()) return;
    if (inicio && fim && new Date(inicio) > new Date(fim)) {
      setErroData("A data de in√≠cio n√£o pode ser depois da data de fim.");
      return;
    }

    const dados = { nome, status, inicio, fim, prioridade, usuarioId };
    try {
      if (editarId) {
        await axios.put(`http://localhost:8080/tarefas/${editarId}`, dados, { headers });
      } else {
        await axios.post("http://localhost:8080/tarefas", dados, { headers });
      }
      limparCampos();
      buscarTarefas();
    } catch (err) {
      console.error("Erro ao salvar tarefa:", err);
    }
  };

  // Fun√ß√µes para deletar e concluir tarefas
  // Utilizam o ID da tarefa para fazer a requisi√ß√£o √† API
  const deletarTarefa = async (id) => {
    try {
      await axios.delete(`http://localhost:8080/tarefas/${id}`, { headers });
      buscarTarefas();
    } catch (err) {
      console.error("Erro ao deletar tarefa:", err);
    }
  };

  // Fun√ß√£o para concluir uma tarefa
  // Atualiza o status da tarefa para "Conclu√≠do"
  const concluirTarefa = async (tarefa) => {
    try {
      await axios.put(`http://localhost:8080/tarefas/${tarefa.id}`, { ...tarefa, status: "Conclu√≠do" }, { headers });
      buscarTarefas();
    } catch (err) {
      console.error("Erro ao concluir tarefa:", err);
    }
  };

  // Preenche o formul√°rio com os dados da tarefa selecionada para edi√ß√£o
  // Permite que o usu√°rio edite os detalhes da tarefa
  const preencherFormulario = (tarefa) => {
    setNome(tarefa.nome);
    setStatus(tarefa.status);
    setInicio(tarefa.inicio);
    setFim(tarefa.fim);
    setPrioridade(tarefa.prioridade);
    setEditarId(tarefa.id);
    setErroData("");
  };

  // Fun√ß√£o para fazer logout
  // Limpa o localStorage e recarrega a p√°gina para redirecionar o usu√°rio
  // Isso efetivamente encerra a sess√£o do usu√°rio e o leva de volta √† p√°gina de login
  const logout = () => {
    localStorage.clear();
    window.location.reload();
  };
  useEffect(() => {
    buscarTarefas();
    buscarNomeUsuario();
  }, []);

  const tarefasExibidas = mostrarFinalizadas
    ? tarefas.filter((t) => t.status.toLowerCase() === "conclu√≠do")
    : tarefas.filter((t) => t.status.toLowerCase() !== "conclu√≠do");


  /*Renderiza a interface de gerenciamento de tarefas
   Exibe um cabe√ßalho com o nome do usu√°rio e um bot√£o de logout
   Exibe um formul√°rio para adicionar ou editar tarefas
   Exibe uma tabela com as tarefas pendentes ou conclu√≠das, dependendo do filtro selecion
   Permite editar, deletar ou concluir tarefas
   Exibe mensagens de erro quando necess√°rio, como ao tentar adicionar uma tarefa com data inv√°l
   Exibe uma mensagem quando n√£o h√° tarefas encontradas
   Permite alternar entre ver tarefas pendentes ou conclu√≠das
  */
  return (
    <div className="tarefas-container">
      <header className="cabecalho">
        <div>
          <h2>Veja suas tarefas</h2>
          <p>Bem-vindo, <strong>{nomeUsuario}!</strong></p>
        </div>
        <button className="logout-button" onClick={logout}>Logout</button>
      </header>

      <div className="form-tarefa">
        <div className="form-group">
          <label>Nome da Tarefa</label>
          <input type="text" placeholder="Ex: Estudar React" value={nome} onChange={(e) => setNome(e.target.value)} />
        </div>

        <div className="form-group">
          <label>Estado</label>
          <select value={status} onChange={(e) => setStatus(e.target.value)}>
            <option value="Pendente">Pendente</option>
            <option value="Em execu√ß√£o">Em execu√ß√£o</option>
            <option value="Conclu√≠do">Conclu√≠do</option>
          </select>
        </div>

        <div className="form-group">
          <label>Data Inicial</label>
          <input type="datetime-local" value={inicio} onChange={(e) => setInicio(e.target.value)}  />
        </div>

        <div className="form-group">
          <label>Data Final</label>
          <input type="datetime-local" value={fim} onChange={(e) => setFim(e.target.value)} />
        </div>

        <div className="form-group">
          <label>Prioridade</label>
          <select value={prioridade} onChange={(e) => setPrioridade(e.target.value)}>
            <option value="BAIXA">Baixa</option>
            <option value="MEDIA">M√©dia</option>
            <option value="ALTA">Alta</option>
          </select>
        </div>

        {erroData && <div className="erro-data">{erroData}</div>}

        <div className="form-actions">
          <button onClick={adicionarOuAtualizarTarefa} className="submit-button">
            {editarId ? "Atualizar" : "Adicionar"}
          </button>

          <button onClick={() => setMostrarFinalizadas((prev) => !prev)} className="toggle-button">
            {mostrarFinalizadas ? "Ver pendentes" : "Ver finalizadas"}
          </button>
        </div>
      </div>

      <div className="table-container">
        <table className="tabela-tarefas">
          <thead>
            <tr>
              <th>Nome</th>
              <th>Status</th>
              <th>Prioridade</th>
              <th>In√≠cio</th>
              <th>Fim</th>
              <th>A√ß√µes</th>
            </tr>
          </thead>
          <tbody>
            {tarefasExibidas.length === 0 ? (
              <tr>
                <td colSpan="6" className="no-tasks-message">Nenhuma tarefa encontrada.</td>
              </tr>
            ) : (
              tarefasExibidas.map((tarefa) => (
                <tr key={tarefa.id}>
                  <td>{tarefa.nome}</td>
                  <td>{tarefa.status}</td>
                  <td>{tarefa.prioridade}</td>
                  <td>{new Date(tarefa.inicio).toLocaleString()}</td>
                  <td>{new Date(tarefa.fim).toLocaleString()}</td>
                  <td className="acoes">
                    <button className="btn-editar" onClick={() => preencherFormulario(tarefa)}>‚úèÔ∏è</button>
                    <button className="btn-deletar" onClick={() => deletarTarefa(tarefa.id)}>üóëÔ∏è</button>
                    {tarefa.status !== "Conclu√≠do" && (
                      <button className="btn-concluir" onClick={() => concluirTarefa(tarefa)}>‚úÖ</button>
                    )}
                  </td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}
